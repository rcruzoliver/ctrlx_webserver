# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers

# /// parameters for the move linear commands for a kinematics
class KinCmdMoveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdMoveData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdMoveData()
        x.Init(buf, n + offset)
        return x

    # KinCmdMoveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// commanded target position (or increment for relative position command)
    # KinCmdMoveData
    def KinPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdMoveData
    def KinPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdMoveData
    def KinPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// coordSys for commanded target position
    # KinCmdMoveData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// dynamic limits for the motion of this command
    # KinCmdMoveData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// should this be a buffered command?
    # KinCmdMoveData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def KinCmdMoveDataStart(builder): builder.StartObject(4)
def KinCmdMoveDataAddKinPos(builder, kinPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kinPos), 0)
def KinCmdMoveDataStartKinPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinCmdMoveDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def KinCmdMoveDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def KinCmdMoveDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 1)
def KinCmdMoveDataEnd(builder): return builder.EndObject()
