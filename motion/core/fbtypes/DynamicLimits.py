# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers

# /// set of dynamic limits (for commands)
class DynamicLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDynamicLimits(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicLimits()
        x.Init(buf, n + offset)
        return x

    # DynamicLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// velocity limit (must be greater than zero)
    # DynamicLimits
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// acceleration limit (must be greater than zero)
    # DynamicLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// deceleration limit (must be greater than zero)
    # DynamicLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DynamicLimitsStart(builder): builder.StartObject(5)
def DynamicLimitsAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def DynamicLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def DynamicLimitsAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def DynamicLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def DynamicLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def DynamicLimitsEnd(builder): return builder.EndObject()
