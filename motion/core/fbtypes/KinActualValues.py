# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers

# /// actual values of the kinematics
class KinActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinActualValues(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinActualValues()
        x.Init(buf, n + offset)
        return x

    # KinActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// actual position
    # KinActualValues
    def ActualPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinActualValues
    def ActualPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinActualValues
    def ActualPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// actual velocity (currently not supported)
    # KinActualValues
    def ActualVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// actual acceleration (currently not supported)
    # KinActualValues
    def ActualAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// actual jerk (currently not supported)
    # KinActualValues
    def ActualJerk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// units of the actual position
    # KinActualValues
    def ActualPosUnit(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinActualValues
    def ActualPosUnitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// unit of the actual velocity (currently not supported)
    # KinActualValues
    def ActualVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// unit of the actual acceleration (currently not supported)
    # KinActualValues
    def ActualAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// unit of the actual jerk (currently not supported)
    # KinActualValues
    def ActualJerkUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinActualValuesStart(builder): builder.StartObject(8)
def KinActualValuesAddActualPos(builder, actualPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actualPos), 0)
def KinActualValuesStartActualPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinActualValuesAddActualVel(builder, actualVel): builder.PrependFloat64Slot(1, actualVel, 0.0)
def KinActualValuesAddActualAcc(builder, actualAcc): builder.PrependFloat64Slot(2, actualAcc, 0.0)
def KinActualValuesAddActualJerk(builder, actualJerk): builder.PrependFloat64Slot(3, actualJerk, 0.0)
def KinActualValuesAddActualPosUnit(builder, actualPosUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actualPosUnit), 0)
def KinActualValuesStartActualPosUnitVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinActualValuesAddActualVelUnit(builder, actualVelUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actualVelUnit), 0)
def KinActualValuesAddActualAccUnit(builder, actualAccUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actualAccUnit), 0)
def KinActualValuesAddActualJerkUnit(builder, actualJerkUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actualJerkUnit), 0)
def KinActualValuesEnd(builder): return builder.EndObject()
